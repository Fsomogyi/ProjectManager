@model ProjectManager.Models.TaskDetailsModel

<script type="text/javascript">

    $(document).ready(function () {
        $('#writeCommentDiv').hide();
        $('#writeComment').click(function () {
            $('#writeCommentDiv').toggle();
        })


        $("#postComment").click(function () {
            var content = $("#commentContent").val();
            var comment = { commentContent: content};
            $.ajax({
                type: "POST",
                url: "/Tasks/PostComment/" +@Model.Task.Id,
                data: comment,
                datatype: "html",
                success: function (data) {
                    $("#currentComments").prepend(data);
                }
            });

            $('#writeCommentDiv').hide();
        });

        $("#subWindowBg").css("height", $(document).height());
        $("#subWindowBg").css("width", $(document).width());

        $("#subWindowClose").click(function () {
            $("#subWindowBg").fadeOut();
            return false;
        });

        $("#addOrRemoveDeveloper").click(function () {
            $("#subWindowContent").load('/Tasks/AddOrRemoveDeveloperDialog/' + @Model.Task.Id);
            $("#subWindowBg").fadeIn();
            return false;
        });

        $("#deleteTaskDialog").click(function () {
            $("#subWindowContent").load('/Tasks/DeleteTaskDialog/' + @Model.Task.Id);
            $("#subWindowBg").fadeIn();
            return false;
        });

        $("#restoreTaskDialog").click(function () {
            $("#subWindowContent").load('/Tasks/RestoreTaskDialog/' + @Model.Task.Id);
            $("#subWindowBg").fadeIn();
            return false;
        });

        $("#addWorkTime").click(function () {
            $("#subWindowContent").load('/Tasks/AddWorkTimeDialog/' + @Model.Task.Id);
            $("#subWindowBg").fadeIn();
            return false;
        });

        $("#finishDialog").click(function () {
            $("#subWindowContent").load('/Tasks/FinishDialog/' + @Model.Task.Id);
            $("#subWindowBg").fadeIn();
            return false;
        });

        $("#reopenDialog").click(function () {
            $("#subWindowContent").load('/Tasks/ReopenDialog/' + @Model.Task.Id);
            $("#subWindowBg").fadeIn();
            return false;
        });
    });
</script>



<div class="fuzz sub-window" id="subWindowBg">
    <div class="subWindowFrame">
        <a id="subWindowClose" href="#" class="closeWindowButton"><img src="~/Content/images/close.png" /></a>
        <div id="subWindowContent">
        </div>
    </div>
</div>

<h2>@Model.Task.Name</h2>

@if ((bool)ViewData["isLeader"] && Model.Task.State != (int)ViewData["doneId"] && !Model.ProjectDone)
{
    
    if (Model.Task.State == (int)ViewData["deletedId"])
    {
        <input class="action-button-small" id="restoreTaskDialog" type="button" value="Restore task" />
    }

    else
    {
        <input class="action-button-small" id="deleteTaskDialog" type="button" value="Delete task" />
    }
}


@if ((bool)ViewData["isLeader"] && Model.Task.State == (int)ViewData["newId"] && !Model.ProjectDone)
{
    <input class="action-button-small" id="addOrRemoveDeveloper" type="button" value="Change developers"/>
}

@if ((bool)ViewData["isUserOnTask"] && Model.Task.State == (int)ViewData["activeId"] && !Model.ProjectDone)
{
    <input class="action-button-small" id="addWorkTime" type="button" value="Add worktime" />
}

@if ((bool)ViewData["isLeader"] && Model.Task.State == (int)ViewData["newId"] && !Model.ProjectDone)
{
    using (Html.BeginForm("FinalizeUserApplication", "Tasks", new { taskId = Model.Task.Id }, FormMethod.Post, new { @class = "inlineform" }))
    {
        <button class="action-button-small" type="submit">Start task</button>
    }
}

@if (Model.Task.State == (int)ViewData["activeId"] && 
    ((bool)ViewData["isLeader"] || (bool)ViewData["userHasWorktime"]) && 
    !Model.ProjectDone)
{
    <input class="action-button-small" id="finishDialog" type="button" value="Finish task" />
}
else if (Model.Task.State == (int)ViewData["doneId"] &&
    ((bool)ViewData["isLeader"] || (bool)ViewData["userHasWorktime"]) &&
    !Model.ProjectDone)
{
    <input class="action-button-small" id="reopenDialog" type="button" value="Reopen task" />
}

<hr style="border-top:2px solid black;" />

@if (!(bool)ViewData["isLeader"] && Model.Task.State == (int)ViewData["newId"] &&
    !(bool)ViewData["isUserApplyUnaccepted"] && !(bool)ViewData["isUserOnTask"] && !Model.ProjectDone)
{
    using (Html.BeginForm("ApplyDeveloper", "Tasks", new { taskId = Model.Task.Id }, FormMethod.Post))
    {
        <button class="action-button-small" type="submit">Apply for task</button>
    }
    <hr style="border-top:2px solid black;"/>
}


@if ((bool)ViewData["isLeader"] && Model.Task.State == (int)ViewData["newId"] && !Model.ProjectDone)
{
    if (Model.UnacceptedDevelopers.Count > 0)
    {
        <h4>Unaccepted appliances</h4>
    }

    foreach (var dev in Model.UnacceptedDevelopers)
    {

        <div style="width: 100px; margin: 5px; display: inline-block; height: 34px; ">@dev.UserName</div>
        if (!Model.MaxDevelopers)
        {
            using (Html.BeginForm("AcceptAppliance", "Tasks", new { taskId = Model.Task.Id, developerId = dev.Id }, FormMethod.Post, new { @class = "inlineform" }))
            {
                <button type="submit" class="action-button-smallest">Accept</button>
            }
        }

        using (Html.BeginForm("DeclineAppliance", "Tasks", new { taskId = Model.Task.Id, developerId = dev.Id }, FormMethod.Post, new { @class = "inlineform" }))
        {
            <button type="submit" class="action-button-smallest">Decline</button>
        }
        <br />
    }
}

@if (Model.UnacceptedTaskStateChanges.Count > 0)
{
    <h4>Unaccepted state changes</h4>
    foreach (var tsc in Model.UnacceptedTaskStateChanges)
    {
        <p>
            User: @tsc.UserName 
        </p>
        <p>
            State: @tsc.StateName 
        </p>
            <p>
            Reason: @tsc.Reason 
        </p>
            <p>
            Date: @tsc.Timestamp.ToString("yyyy.MM.dd H:mm") 
        </p>
    
        if((bool)ViewData["isLeader"])
        {
            using (Html.BeginForm("AcceptStateChange", "Tasks", new { taskId = Model.Task.Id, developerId = tsc.ProjectUserId }, FormMethod.Post))
            {
                <button type="submit">Accept</button>
            }
            using (Html.BeginForm("DeclineStateChange", "Tasks", new { taskId = Model.Task.Id, developerId = tsc.ProjectUserId }, FormMethod.Post))
            {
                <button type="submit">Decline</button>
                <hr style="border-top:2px solid black;"/>
            }
        }
    }
    <hr style="border-top:2px solid black;"/>
}


    <p class="fieldLabel">Assigned to:</p>
    @foreach (var name in Model.DeveloperNames)
    {
        @name
        if (Model.DeveloperNames.Last() != @name)
        {@(", ")}
    }

    <p class ="fieldLabel">State:</p> @Model.StateName

    @if (Model.WorkHours.Count > 0)
    {
        <p class="fieldLabel"> Work hours:</p>
        foreach (var entry in Model.WorkHours)
        {
            @(" " + @entry.Key + ": " + entry.Value);<br />
        }

    }

    @if (Model.CanComment && !Model.ProjectDone)
    {
        <h3>Comments</h3>

        <input type="button" class="action-button" id="writeComment" value="Write comment" style='margin-bottom: 5px;' />

        <div>
            <div id="writeCommentDiv" class="writeComment" style="display: inline-block;">
                <textarea id="commentContent" class="commentTextArea"></textarea>
                <input type="button" class="action-button-small" id="postComment" value="Post comment" style='float: right;' />
            </div>

            <div id="currentComments" style="display: inline-block; width: 100%;">
                @foreach (var comment in Model.Comments)
                {
                    @Html.Partial("_Comment", comment);
                }
            </div>
        </div>
    }
