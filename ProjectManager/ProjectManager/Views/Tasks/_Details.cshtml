@model ProjectManager.Models.TaskDetailsModel

<script type="text/javascript">

    $(document).ready(function () {
        $('#writeCommentDiv').hide();
        $('#writeComment').click(function () {
            $('#writeCommentDiv').toggle();
        })


        $("#postComment").click(function () {
            var content = $("#commentContent").val();
            var comment = { commentContent: content};
            $.ajax({
                type: "POST",
                url: "/Tasks/PostComment/" +@Model.Task.Id,
                data: comment,
                datatype: "html",
                success: function (data) {
                    $("#currentComments").prepend(data);
                }
            });

            $('#writeCommentDiv').hide();
        });
    });
</script>

<h2>@Model.Task.Name</h2>

@if((bool)ViewData["isLeader"] && Model.Task.State != (int)ViewData["doneId"])
{
    if (Model.Task.State == (int)ViewData["deletedId"])
    {
        using (Html.BeginForm("RestoreTask", "Tasks", new { taskId = Model.Task.Id }))
        {
            <button type="submit">Restore task</button>
        }
    }

    else
    {
        using (Html.BeginForm("DeleteTask", "Tasks", new { taskId = Model.Task.Id }))
        {
            <button type="submit">Delete task</button>
        }
    }
}

@if((bool)ViewData["isUserOnTask"] && Model.Task.State != (int)ViewData["doneId"]
    && Model.Task.State != (int)ViewData["deletedId"])
{
    using (Html.BeginForm("AddWorkTime", "Tasks", new { taskId = Model.Task.Id }))
    {
        
        //data-provide="datepicker" data-date-format="yyyy.mm.dd" 
        <br /> <br /> 
        
        <p>Start time:</p> <input name="startTime" type="text" 
            value="@DateTime.Now.ToString("yyyy.MM.dd H:mm")" />
    
        <br /> <br /> 

        <p>End time:</p> <input name="endTime" type="text"
            value="@DateTime.Now.ToString("yyyy.MM.dd H:mm")" />
        
        <br /><br />
        
        <button type="submit">Add Work Time</button>
    
        <br /> <br /> 
    }
}

<p>
    Assigned to:
    @foreach (var name in Model.DeveloperNames)
    {
        @name
        if (Model.DeveloperNames.Last() != @name)
        {@(", ")}
    }
    <br /><br />
    State: @Model.StateName<br /><br />
    Work hours:<br />
    @foreach (var entry in Model.WorkHours)
    {
        @(" -" + @entry.Key + ": " + entry.Value);<br/>
    }

    @if (Model.CanComment)
    {
    <h3>Comments</h3>
        
    <input type="button" id="writeComment" value="Write comment" style='margin-bottom: 5px;' />


        <div>
            <div id="writeCommentDiv" class="writeComment" style="display: inline-block;">
                <textarea id="commentContent" class="commentTextArea"></textarea>
                <input type="button" id="postComment" value="Post comment" style='float: right;' />
            </div>

            <div id="currentComments" style="display: inline-block; width: 100%;">
                @foreach (var comment in Model.Comments)
                {
                    @Html.Partial("_Comment", comment);
                }
            </div>
        </div>
    }
</p>